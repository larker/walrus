package org.j4.service;

import java.util.Collection;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.j4.dao.BaseDao;
import org.j4.model.Rubric;
import org.j4.model.Site;
import org.j4.model.Sites;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
@Service("siteService")
public class SiteService {
	
	protected org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(this.getClass());
	
	@Autowired
	BaseDao baseDao;
	@Autowired
	Sites sites;
	@Autowired
	RubricService rubricService;
	
	public Site getSite(String host, String language, boolean createSite) {
		//if (sites.isEmpty()) {
			loadAllSites();
		//}
	
		Site site = sites.get(host, language);
		if (null != site) {
			return site;
		} else {
			site = baseDao.getSite(host, language);
			if (null == site) {
				initSite(host, language);
			} else {
				sites.put(host + language, site);
			}
			return sites.get(host, language);
		}
	}
	private void loadAllSites() {
		List<Site> allSites = baseDao.getAllSites();
		if (null != allSites) {
			for (Site site : allSites) {
				sites.put(site.getHost() + site.getLanguage(), site);
				loadSiteAliases(site);
			}
		}
	}
	
	private void loadSiteAliases(Site site) {
		if (site.hasAliases()) {
			String[] aliases = site.getHostAliases().split(",");
			for (String alias : aliases) {
				if (StringUtils.hasText(alias)) {
					sites.put(alias.trim() + site.getLanguage(), site);
				}
			}
		}
	}
	
	
	/**
	 * @return all sites managed
	 */
	public Collection<Site> getAllSites() {
		return sites.getSites();
	}
	
	public Site getSite(HttpServletRequest request) {
		return getSite(request.getServerName(), "cn", null != request
				.getParameter("createSite"));
	}
	/**
	 * Get all sites for given language
	 * 
	 * @param language
	 * @return all sites for given language
	 */
	public List<Site> getSites(String language) {
		return sites.getList(language);
	}
	
	public Rubric getCurrentRubric(Site site, String rubricId) {
		Rubric currRubric = site.getRootRubric();
		if (null != rubricId) {
			currRubric = rubricService.get(Long.valueOf(rubricId));
		}
		return currRubric;
	}
	
	
	@Transactional
	public void initSite(String host, String language) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("conf/site.xml");
		Site sitePrototype = (Site) context.getBean("sitePrototype");
	
		if (null == sitePrototype) {
			sitePrototype = new Site();
			sitePrototype.setRootRubric(new Rubric("ROOT - AUTOGENERATED"));
		}
	
		sitePrototype.getRootRubric().initChildrenOrderNos();
		sitePrototype.getRootRubric().setOrderno(1);
		sitePrototype.setLanguage(language);
		sitePrototype.setHost(host);
	
		if (null == sitePrototype.getTitle()) {
			sitePrototype.setTitle(host);
		}
	
		int index = 0;
		if (!sites.getList(language).isEmpty()) {
			index = sites.getList(language).get(sites.getList(language).size() - 1).getIndex() + 1;
		}
		sitePrototype.setIndex(index);
	
		add(sitePrototype);
	}
	@Transactional
	public void add(Site site) {
		site.getRootRubric().setOrderno(1);
		baseDao.save(site);
		// load site from db to get initialized ids
		Site site2 = baseDao.getSite(site.getHost(), site.getLanguage());
		sites.put(site.getHost() + site.getLanguage(), site2);
	}
}
